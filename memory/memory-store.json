{
  "coordination": [
    {
      "key": "hive/research/architecture-patterns",
      "value": "# Dotfiles Architecture Patterns (2025)\n\n## 1. Per-Application Directory Structure (RECOMMENDED)\n- Most modern and maintainable approach\n- Each tool/application gets its own directory\n- Mirrors home directory structure for clarity\n\nStructure:\n~/.dotfiles/\n├── bash/\n│   └── .bashrc\n├── nvim/\n│   ├── init.lua\n│   └── lua/\n│       └── plugins/\n├── git/\n│   └── .gitconfig\n├── tmux/\n│   └── .tmux.conf\n├── zsh/\n│   ├── .zshrc\n│   └── .zshenv\n├── ansible/\n│   ├── playbooks/\n│   ├── roles/\n│   └── inventory/\n└── bootstrap.sh\n\n## 2. Bare Git Repository Method\n- Store Git bare repo in ~/.cfg or ~/.dotfiles\n- Use different branches for different machines\n- Symlink-free approach using git worktree\n- Excellent for minimalist setups\n\n## 3. GNU Stow + Git Hybrid\n- Use GNU Stow for symlink management\n- Combined with Ansible for package installation\n- Separates dotfiles from system configuration\n- Version-controlled and reproducible\n\n## 4. Ansible + Chezmoi (Enterprise)\n- Chezmoi for environment-aware dotfile management\n- Ansible for declarative infrastructure automation\n- Zero-touch bootstrap via single command\n- Dual secrets management (chezmoi + Ansible Vault)\n- Best for compliance-heavy environments\n\n## 5. Modern XDG Compliance\n- Follow XDG Base Directory specification\n- Use $XDG_CONFIG_HOME (~/.config) for config files\n- Use $XDG_DATA_HOME (~/.local/share) for data\n- Use $XDG_CACHE_HOME (~/.cache) for cache\n\nRecommended for this project: **Hybrid approach #3**\n- Per-application directory structure\n- Ansible for cross-platform package management\n- GNU Stow or symlinks for dotfile deployment\n- Bootstrap script for idempotent installation",
      "namespace": "coordination",
      "timestamp": 1759281072105
    },
    {
      "key": "hive/research/dependencies",
      "value": "# Cross-Platform Dependencies and Package Equivalents\n\n## Package Manager Matrix\n\n| Tool/Application | Ubuntu/Debian (apt) | macOS (brew) | Arch (pacman) | Notes |\n|-----------------|---------------------|--------------|---------------|-------|\n| Git             | git                 | git          | git           | Universal |\n| Zsh             | zsh                 | zsh          | zsh           | Universal |\n| Tmux            | tmux                | tmux         | tmux          | Universal |\n| Neovim          | neovim              | neovim       | neovim        | Universal |\n| Curl            | curl                | curl         | curl          | Universal |\n| Wget            | wget                | wget         | wget          | Universal |\n| Ripgrep         | ripgrep             | ripgrep      | ripgrep       | Universal |\n| Fd              | fd-find             | fd           | fd            | Name differs |\n| Bat             | bat                 | bat          | bat           | Universal |\n| Fzf             | fzf                 | fzf          | fzf           | Universal |\n| Stow            | stow                | stow         | stow          | Universal |\n| Python3         | python3             | python3      | python        | Name differs |\n| Node.js         | nodejs              | node         | nodejs        | Name differs |\n| Docker          | docker.io           | docker       | docker        | Name differs |\n| Build tools     | build-essential     | N/A          | base-devel    | Platform-specific |\n\n## Ansible Package Module Strategy\n\nUse the generic `package` module with conditional logic:\n\n```yaml\n- name: Install universal packages\n  package:\n    name:\n      - git\n      - zsh\n      - tmux\n      - neovim\n      - curl\n      - wget\n    state: present\n\n- name: Install platform-specific packages (Debian/Ubuntu)\n  apt:\n    name:\n      - fd-find\n      - build-essential\n    state: present\n  when: ansible_pkg_mgr == \"apt\"\n\n- name: Install platform-specific packages (Arch)\n  pacman:\n    name:\n      - fd\n      - base-devel\n    state: present\n  when: ansible_pkg_mgr == \"pacman\"\n\n- name: Install platform-specific packages (macOS)\n  homebrew:\n    name:\n      - fd\n    state: present\n  when: ansible_pkg_mgr == \"homebrew\"\n```\n\n## Critical Dependencies\n\n1. **Ansible** (2.14+) - Required for automation\n2. **Git** - Version control\n3. **Zsh** - Shell\n4. **Stow** (if using symlink approach) - Dotfile management\n5. **Python3** - Ansible dependency\n\n## Optional but Recommended\n\n- **TPM** (Tmux Plugin Manager) - Install via git clone\n- **Zinit** - Zsh plugin manager (performance optimized)\n- **Lazy.nvim** - Neovim plugin manager\n- **Nerd Fonts** - For terminal aesthetics",
      "namespace": "coordination",
      "timestamp": 1759281074162
    },
    {
      "key": "hive/research/folder-structure",
      "value": "# Recommended Folder Structure for Dotfiles-Ansible Project\n\ndotfiles-ansible/\n├── ansible/\n│   ├── playbooks/\n│   │   ├── main.yml              # Master playbook\n│   │   ├── packages.yml          # Package installation\n│   │   ├── dotfiles.yml          # Dotfile deployment\n│   │   └── system-config.yml     # System configuration\n│   ├── roles/\n│   │   ├── common/               # Common tasks for all systems\n│   │   ├── zsh/                  # Zsh configuration role\n│   │   ├── neovim/               # Neovim configuration role\n│   │   ├── tmux/                 # Tmux configuration role\n│   │   └── git/                  # Git configuration role\n│   ├── inventory/\n│   │   ├── hosts                 # Ansible inventory\n│   │   └── group_vars/\n│   │       ├── all.yml          # Variables for all hosts\n│   │       └── vault.yml        # Encrypted secrets (Ansible Vault)\n│   └── ansible.cfg               # Ansible configuration\n├── dotfiles/\n│   ├── zsh/\n│   │   ├── .zshrc\n│   │   ├── .zshenv\n│   │   └── aliases.zsh\n│   ├── nvim/\n│   │   ├── init.lua              # Modern Lua config\n│   │   └── lua/\n│   │       ├── plugins/\n│   │       ├── config/\n│   │       └── keymaps.lua\n│   ├── tmux/\n│   │   ├── .tmux.conf\n│   │   └── plugins/              # TPM plugins\n│   ├── git/\n│   │   ├── .gitconfig\n│   │   └── .gitignore_global\n│   └── bash/\n│       └── .bashrc               # Fallback shell\n├── scripts/\n│   ├── bootstrap.sh              # Main bootstrap script\n│   ├── install-ansible.sh        # Ansible installation\n│   ├── pre-checks.sh             # System validation\n│   └── post-install.sh           # Post-installation tasks\n├── tests/\n│   ├── molecule/                 # Molecule test scenarios\n│   │   └── default/\n│   │       ├── molecule.yml\n│   │       ├── converge.yml\n│   │       └── verify.yml\n│   └── validation/               # Custom validation scripts\n│       ├── test-zsh.sh\n│       ├── test-nvim.sh\n│       └── test-tmux.sh\n├── docs/\n│   ├── INSTALL.md                # Installation guide\n│   ├── ARCHITECTURE.md           # Architecture decisions\n│   └── TROUBLESHOOTING.md        # Common issues\n├── .github/\n│   └── workflows/\n│       ├── test-ubuntu.yml       # CI for Ubuntu\n│       ├── test-macos.yml        # CI for macOS\n│       └── test-arch.yml         # CI for Arch\n├── .gitignore\n├── README.md\n└── LICENSE\n\n## Key Organizational Principles\n\n1. **Separation of Concerns**: Dotfiles, automation, and scripts are separated\n2. **Role-Based**: Ansible roles for each major component\n3. **Testable**: Dedicated tests/ directory with Molecule\n4. **Documented**: Comprehensive docs/ directory\n5. **CI/CD Ready**: GitHub Actions workflows included\n6. **XDG Compliant**: Dotfiles follow XDG Base Directory spec where possible\n\n## File Placement Rules\n\n- **NEVER** save working files to root directory\n- Dotfiles go in `dotfiles/` directory\n- Tests go in `tests/` directory\n- Documentation goes in `docs/` directory\n- Scripts go in `scripts/` directory\n- Ansible automation in `ansible/` directory",
      "namespace": "coordination",
      "timestamp": 1759281076531
    },
    {
      "key": "hive/research/neovim-config",
      "value": "# Neovim Configuration Best Practices (2025)\n\n## Init.lua vs Init.vim - THE VERDICT\n\n**Use init.lua for all new configurations in 2025**\n\n### Why init.lua?\n\n1. **Performance**: Better performance with Lua-based plugins\n2. **Modern Standard**: All new plugins use Lua APIs\n3. **Language Benefits**: Lua is a full programming language\n4. **Native Support**: Neovim's core APIs are in Lua\n5. **Lazy.nvim**: Modern plugin manager requires Lua\n\n### Recommended Structure\n\n~/.config/nvim/\n├── init.lua                  # Entry point\n└── lua/\n    └── [username]/\n        ├── init.lua          # Module loader\n        ├── options.lua       # Vim options (set commands)\n        ├── keymaps.lua       # Key mappings\n        ├── plugins.lua       # Plugin specifications\n        └── config/\n            ├── lsp.lua       # LSP configuration\n            ├── treesitter.lua\n            ├── telescope.lua\n            └── [plugin].lua\n\n### Modern init.lua Template\n\n```lua\n-- ~/.config/nvim/init.lua\n-- Set leader key before lazy.nvim\nvim.g.mapleader = \" \"\nvim.g.maplocalleader = \" \"\n\n-- Bootstrap lazy.nvim\nlocal lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not vim.loop.fs_stat(lazypath) then\n  vim.fn.system({\n    \"git\",\n    \"clone\",\n    \"--filter=blob:none\",\n    \"https://github.com/folke/lazy.nvim.git\",\n    \"--branch=stable\",\n    lazypath,\n  })\nend\nvim.opt.rtp:prepend(lazypath)\n\n-- Load core modules\nrequire(\"yourname.options\")\nrequire(\"yourname.keymaps\")\n\n-- Load plugins with lazy.nvim\nrequire(\"lazy\").setup(\"yourname.plugins\")\n```\n\n### Essential Plugins for 2025\n\n1. **Lazy.nvim** - Plugin manager (fast, lazy-loading)\n2. **nvim-treesitter** - Syntax highlighting\n3. **telescope.nvim** - Fuzzy finder\n4. **nvim-lspconfig** - LSP configuration\n5. **nvim-cmp** - Autocompletion\n6. **gitsigns.nvim** - Git integration\n7. **which-key.nvim** - Keybinding helper\n8. **neo-tree.nvim** - File explorer\n\n### Converting from VimScript\n\n| VimScript | Lua Equivalent |\n|-----------|----------------|\n| `set number` | `vim.opt.number = true` |\n| `let g:var = \"value\"` | `vim.g.var = \"value\"` |\n| `nnoremap <leader>w :w<CR>` | `vim.keymap.set('n', '<leader>w', ':w<CR>')` |\n| `autocmd BufEnter * ...` | `vim.api.nvim_create_autocmd(\"BufEnter\", ...)` |\n\n### Migration Strategy\n\nIf you have existing init.vim:\n1. Create init.lua alongside it\n2. Use `vim.cmd([[source ~/.config/nvim/legacy.vim]])` temporarily\n3. Gradually migrate configurations to Lua modules\n4. Remove init.vim when complete\n\n### Performance Optimization\n\n- Use lazy-loading for plugins (`lazy = true` in plugin specs)\n- Load plugins on events (`event = \"VeryLazy\"`)\n- Load language plugins on filetype (`ft = {\"python\", \"javascript\"}`)\n- Profile with `:Lazy profile` to identify bottlenecks",
      "namespace": "coordination",
      "timestamp": 1759281136354
    },
    {
      "key": "hive/research/tmux-config",
      "value": "# Tmux Configuration Best Practices (2025)\n\n## Modern Tmux Configuration\n\n### Essential Settings\n\n```tmux\n# ~/.config/tmux/tmux.conf or ~/.tmux.conf\n\n# Set prefix to Ctrl-a (more ergonomic than Ctrl-b)\nunbind C-b\nset-option -g prefix C-a\nbind-key C-a send-prefix\n\n# Enable mouse support\nset -g mouse on\n\n# Start windows and panes at 1, not 0\nset -g base-index 1\nsetw -g pane-base-index 1\n\n# Renumber windows when one is closed\nset -g renumber-windows on\n\n# Increase scrollback buffer size\nset -g history-limit 50000\n\n# Enable true color support\nset -g default-terminal \"screen-256color\"\nset -ga terminal-overrides \",xterm-256color:Tc\"\n\n# Improve response time\nset -s escape-time 0\n\n# Automatic window renaming\nsetw -g automatic-rename on\nset -g set-titles on\n\n# Activity monitoring\nsetw -g monitor-activity on\nset -g visual-activity off\n\n# Vi mode\nsetw -g mode-keys vi\n```\n\n### Plugin Management with TPM\n\n```tmux\n# List of plugins\nset -g @plugin 'tmux-plugins/tpm'\nset -g @plugin 'tmux-plugins/tmux-sensible'\nset -g @plugin 'tmux-plugins/tmux-yank'\nset -g @plugin 'tmux-plugins/tmux-resurrect'\nset -g @plugin 'tmux-plugins/tmux-continuum'\nset -g @plugin 'christoomey/vim-tmux-navigator'\nset -g @plugin 'dracula/tmux'\n\n# Initialize TPM (keep this line at the very bottom)\nrun '~/.config/tmux/plugins/tpm/tpm'\n```\n\n### Essential Plugins\n\n1. **tpm** - Tmux Plugin Manager (required)\n2. **tmux-sensible** - Sensible default settings\n3. **tmux-yank** - Copy to system clipboard\n4. **tmux-resurrect** - Save/restore tmux sessions\n5. **tmux-continuum** - Automatic session save/restore\n6. **vim-tmux-navigator** - Seamless vim/tmux navigation\n7. **dracula/tmux** or **catppuccin/tmux** - Modern themes\n\n### Advanced Key Bindings\n\n```tmux\n# Split panes using | and -\nbind | split-window -h -c \"#{pane_current_path}\"\nbind - split-window -v -c \"#{pane_current_path}\"\nunbind '\"'\nunbind %\n\n# Reload config file\nbind r source-file ~/.config/tmux/tmux.conf \\; display \"Config reloaded!\"\n\n# Vim-like pane switching\nbind -r k select-pane -U\nbind -r j select-pane -D\nbind -r h select-pane -L\nbind -r l select-pane -R\n\n# Resize panes with vim keys\nbind -r C-k resize-pane -U 5\nbind -r C-j resize-pane -D 5\nbind -r C-h resize-pane -L 5\nbind -r C-l resize-pane -R 5\n```\n\n### Configuration File Location\n\n**Recommended**: `~/.config/tmux/tmux.conf` (XDG compliant)\n**Legacy**: `~/.tmux.conf` (still supported)\n\n### Folder Structure\n\n```\ndotfiles/tmux/\n├── .tmux.conf                # Main config (symlink to ~/.config/tmux/)\n├── plugins/                  # TPM plugins (auto-managed)\n├── themes/\n│   └── dracula.conf         # Theme configuration\n└── scripts/\n    └── status-right.sh      # Custom status bar scripts\n```\n\n### Ansible Installation\n\n```yaml\n- name: Create tmux config directory\n  file:\n    path: \"{{ ansible_env.HOME }}/.config/tmux\"\n    state: directory\n\n- name: Clone TPM\n  git:\n    repo: https://github.com/tmux-plugins/tpm\n    dest: \"{{ ansible_env.HOME }}/.config/tmux/plugins/tpm\"\n    depth: 1\n\n- name: Install tmux plugins\n  shell: \"{{ ansible_env.HOME }}/.config/tmux/plugins/tpm/bin/install_plugins\"\n  args:\n    creates: \"{{ ansible_env.HOME }}/.config/tmux/plugins/tmux-sensible\"\n```\n\n### Integration with Other Tools\n\n**With Neovim**:\n- Use vim-tmux-navigator for seamless pane navigation\n- Configure same key bindings in both tools\n\n**With Zsh**:\n- Auto-start tmux in .zshrc (optional)\n- Use tmux-continuum for automatic session restoration\n\n### Performance Considerations\n\n- Keep plugin count reasonable (< 10 plugins)\n- Avoid heavy status bar scripts\n- Use tmux-sensible for optimized defaults\n- Disable unused features\n\n### Testing\n\n```bash\n# Validate tmux config\ntmux source-file ~/.config/tmux/tmux.conf\n\n# List current plugins\ntmux show-environment -g\n\n# Check tmux version\ntmux -V\n```",
      "namespace": "coordination",
      "timestamp": 1759281139090
    },
    {
      "key": "hive/research/zsh-config",
      "value": "# Zsh Configuration Best Practices (2025)\n\n## Plugin Manager Comparison\n\n### Zinit (RECOMMENDED for Performance)\n- Startup Time: 50-80% faster than Oh-My-Zsh\n- Turbo Mode: Asynchronous loading (5x speed improvement)\n- Learning Curve: Steeper, more configuration required\n- Best For: Performance-conscious users, power users\n\n### Oh-My-Zsh\n- Startup Time: 0.5-0.7 seconds (slower)\n- Ease of Use: Excellent, simple configuration\n- Plugin Ecosystem: Largest, most comprehensive\n- Best For: Beginners, quick setup\n\n### Zim\n- Startup Time: Fast (0.03-0.05 seconds)\n- Ease of Use: Good balance\n- Configuration: Simpler than Zinit, faster than Oh-My-Zsh\n- Best For: Users wanting speed without complexity\n\n## Recommended Approach: Use Zinit for maximum performance\n\n### Essential Plugins\n\n1. fast-syntax-highlighting - Syntax highlighting\n2. zsh-autosuggestions - Fish-like autosuggestions\n3. zsh-completions - Additional completion definitions\n4. powerlevel10k - Modern, fast prompt theme\n5. fzf - Fuzzy finder integration\n\n### Performance Optimization\n\n1. Lazy Loading: Use wait directive for non-essential plugins\n2. Turbo Mode: Load plugins asynchronously after prompt\n3. Minimal Startup: Only load essential plugins immediately\n4. Profiling: Use zinit times to identify slow plugins",
      "namespace": "coordination",
      "timestamp": 1759281196184
    },
    {
      "key": "hive/research/bootstrap-patterns",
      "value": "# Bootstrap Script Idempotent Patterns (2025)\n\n## Key Principles\n\n1. Idempotency - Scripts must be safe to run multiple times\n2. Detection Before Action - Check if something exists before creating\n3. Platform Detection - Adapt behavior based on OS\n4. Error Handling - Fail gracefully with meaningful messages\n5. Logging - Track what was done for debugging\n\n## Bootstrap Script Structure\n\n```bash\n#\\!/usr/bin/env bash\nset -euo pipefail\n\n# Colors for output\nRED=\"\\033[0;31m\"\nGREEN=\"\\033[0;32m\"\nYELLOW=\"\\033[1;33m\"\nNC=\"\\033[0m\"\n\nlog_info() { echo -e \"${GREEN}[INFO]${NC} $1\"; }\nlog_warn() { echo -e \"${YELLOW}[WARN]${NC} $1\"; }\nlog_error() { echo -e \"${RED}[ERROR]${NC} $1\"; }\n\n# Platform detection\ndetect_platform() {\n    case \"$(uname -s)\" in\n        Linux*)     PLATFORM=linux;;\n        Darwin*)    PLATFORM=macos;;\n        *)          log_error \"Unsupported platform\"; exit 1;;\n    esac\n}\n\n# Check prerequisites\ncheck_prerequisites() {\n    command -v git >/dev/null 2>&1 || { log_error \"Git required\"; exit 1; }\n}\n\n# Install package manager\ninstall_package_manager() {\n    if [[ \"$PLATFORM\" == \"macos\" ]] && \\! command -v brew >/dev/null 2>&1; then\n        log_info \"Installing Homebrew...\"\n        /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n    fi\n}\n\n# Install Ansible\ninstall_ansible() {\n    if command -v ansible >/dev/null 2>&1; then\n        log_info \"Ansible already installed\"\n        return 0\n    fi\n    \n    log_info \"Installing Ansible...\"\n    case \"$PLATFORM\" in\n        linux)\n            sudo apt update && sudo apt install -y ansible\n            ;;\n        macos)\n            brew install ansible\n            ;;\n    esac\n}\n\n# Run Ansible playbook\nrun_ansible() {\n    log_info \"Running Ansible playbook...\"\n    ansible-playbook -i inventory/hosts playbooks/main.yml --ask-become-pass\n}\n\n# Main execution\nmain() {\n    detect_platform\n    check_prerequisites\n    install_package_manager\n    install_ansible\n    run_ansible\n    log_info \"Bootstrap complete\\!\"\n}\n\nmain \"$@\"\n```\n\n## Idempotent Patterns\n\n### Pattern 1: Check Before Install\n```bash\nif \\! command -v package >/dev/null 2>&1; then\n    install_package\nelse\n    log_info \"Package already installed\"\nfi\n```\n\n### Pattern 2: Safe Symlink Creation\n```bash\nif [ \\! -L \"$HOME/.zshrc\" ]; then\n    ln -sf \"$DOTFILES/zsh/.zshrc\" \"$HOME/.zshrc\"\nelse\n    log_info \"Symlink already exists\"\nfi\n```\n\n### Pattern 3: Directory Creation\n```bash\nmkdir -p \"$HOME/.config/nvim\"  # -p makes it idempotent\n```\n\n### Pattern 4: Git Clone with Check\n```bash\nif [ \\! -d \"$TARGET_DIR\" ]; then\n    git clone \"$REPO_URL\" \"$TARGET_DIR\"\nelse\n    log_info \"Repository already cloned\"\nfi\n```\n\n## Testing Strategies\n\n1. Run bootstrap script multiple times\n2. Verify no errors on subsequent runs\n3. Check that files are not duplicated\n4. Ensure permissions are correct\n5. Validate symlinks point to correct targets",
      "namespace": "coordination",
      "timestamp": 1759281198519
    },
    {
      "key": "hive/research/secret-management",
      "value": "# Secret Management for Dotfiles (2025)\n\n## Ansible Vault Integration\n\n### Overview\nAnsible Vault encrypts sensitive data (passwords, API keys, tokens) so they can be safely committed to version control alongside your dotfiles.\n\n### Best Practices\n\n1. Store vault password outside version control\n2. Use vault IDs for multiple environments (dev, prod)\n3. Encrypt entire files OR individual variables\n4. Never commit unencrypted secrets\n5. Use environment variables for runtime secrets\n\n### Vault File Structure\n\n```\nansible/\n├── inventory/\n│   └── group_vars/\n│       ├── all.yml          # Public variables\n│       └── vault.yml        # Encrypted secrets (Ansible Vault)\n├── .vault_pass             # Vault password (gitignored!)\n└── ansible.cfg\n```\n\n### Creating Encrypted Variables\n\n```bash\n# Create encrypted file\nansible-vault create inventory/group_vars/vault.yml\n\n# Edit encrypted file\nansible-vault edit inventory/group_vars/vault.yml\n\n# Encrypt existing file\nansible-vault encrypt inventory/group_vars/secrets.yml\n\n# Decrypt for viewing\nansible-vault view inventory/group_vars/vault.yml\n```\n\n### Example Vault Content\n\n```yaml\n# inventory/group_vars/vault.yml (encrypted)\nvault_github_token: \"ghp_abc123xyz...\"\nvault_api_key: \"sk-proj-...\"\nvault_ssh_passphrase: \"my-secret-passphrase\"\n```\n\n### Using Secrets in Playbooks\n\n```yaml\n# playbooks/git.yml\n- name: Configure Git with credentials\n  git_config:\n    name: github.token\n    value: \"{{ vault_github_token }}\"\n    scope: global\n```\n\n### Alternative: Environment Variables\n\nFor local development without Ansible Vault:\n\n```bash\n# .env (gitignored)\nGITHUB_TOKEN=ghp_abc123xyz...\nAPI_KEY=sk-proj-...\n```\n\n```yaml\n# playbooks/env-vars.yml\n- name: Set environment variables\n  lineinfile:\n    path: \"{{ ansible_env.HOME }}/.zshenv\"\n    line: \"export GITHUB_TOKEN={{ lookup(\\\"env\\\", \\\"GITHUB_TOKEN\\\") }}\"\n    create: yes\n```\n\n### Gitignore Entries\n\n```gitignore\n# Secrets\n.vault_pass\n.vault_password\n*.secret\n.env\n.env.local\n\n# SSH keys\nid_rsa\nid_ed25519\n*.pem\n*.key\n\n# Credentials\n*credentials*\n*secret*\n```\n\n### Secret Rotation Strategy\n\n1. Change secret in external service\n2. Update vault file with new secret\n3. Re-encrypt vault file\n4. Re-run Ansible playbook\n5. Verify secret was updated\n\n## Integration with External Secret Managers\n\nFor enterprise environments:\n- AWS Secrets Manager\n- HashiCorp Vault\n- 1Password CLI\n- Bitwarden CLI\n\nUse Ansible lookup plugins to fetch secrets at runtime.",
      "namespace": "coordination",
      "timestamp": 1759281201301
    },
    {
      "key": "hive/research/testing-strategies",
      "value": "# Testing Strategies for Dotfiles (2025)\n\n## Multi-Level Testing Approach\n\n### 1. CI/CD Testing with GitHub Actions\n\nTest across multiple platforms automatically on every commit.\n\n```yaml\n# .github/workflows/test.yml\nname: Test Dotfiles\n\non: [push, pull_request]\n\njobs:\n  test-ubuntu:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run bootstrap\n        run: ./scripts/bootstrap.sh\n      - name: Validate installations\n        run: ./tests/validation/test-all.sh\n\n  test-macos:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run bootstrap\n        run: ./scripts/bootstrap.sh\n      - name: Validate installations\n        run: ./tests/validation/test-all.sh\n```\n\n### 2. Molecule Testing for Ansible\n\nMolecule provides automated testing for Ansible roles.\n\n```yaml\n# tests/molecule/default/molecule.yml\ndriver:\n  name: docker\n\nplatforms:\n  - name: ubuntu-22.04\n    image: ubuntu:22.04\n  - name: debian-12\n    image: debian:12\n\nprovisioner:\n  name: ansible\n  playbooks:\n    converge: converge.yml\n    verify: verify.yml\n\nverifier:\n  name: ansible\n```\n\n### 3. Validation Scripts\n\nCreate custom test scripts for each component.\n\n```bash\n# tests/validation/test-zsh.sh\n#\\!/usr/bin/env bash\nset -e\n\necho \"Testing Zsh installation...\"\ncommand -v zsh || exit 1\n\necho \"Testing Zsh is default shell...\"\n[[ \"$SHELL\" == *\"zsh\"* ]] || exit 1\n\necho \"Testing .zshrc exists...\"\n[[ -f \"$HOME/.zshrc\" ]] || exit 1\n\necho \"Testing Zinit is installed...\"\n[[ -d \"$HOME/.local/share/zinit\" ]] || exit 1\n\necho \"✓ Zsh tests passed\"\n```\n\n### 4. Idempotency Testing\n\nRun bootstrap script multiple times to ensure idempotency.\n\n```bash\n# tests/validation/test-idempotency.sh\n#\\!/usr/bin/env bash\n\necho \"Running bootstrap first time...\"\n./scripts/bootstrap.sh\n\necho \"Running bootstrap second time...\"\n./scripts/bootstrap.sh\n\necho \"Running bootstrap third time...\"\n./scripts/bootstrap.sh\n\necho \"✓ Idempotency test passed\"\n```\n\n### 5. Docker-Based Testing\n\nTest in isolated containers before running on real systems.\n\n```dockerfile\n# tests/Dockerfile.ubuntu\nFROM ubuntu:22.04\n\nRUN apt-get update && apt-get install -y \\\n    git curl sudo\n\nCOPY . /dotfiles\nWORKDIR /dotfiles\n\nRUN ./scripts/bootstrap.sh\n```\n\n### 6. Ansible Lint\n\nValidate Ansible playbooks and roles.\n\n```bash\n# Run ansible-lint\nansible-lint ansible/playbooks/*.yml\nansible-lint ansible/roles/*/tasks/*.yml\n```\n\n### 7. Shellcheck for Scripts\n\nValidate shell scripts for common issues.\n\n```bash\n# Run shellcheck\nshellcheck scripts/*.sh\nshellcheck tests/validation/*.sh\n```\n\n## Test Checklist\n\n- [ ] Package installations complete successfully\n- [ ] Symlinks created correctly\n- [ ] Configuration files in expected locations\n- [ ] Commands executable (zsh, nvim, tmux, git)\n- [ ] Plugins installed (Zinit, TPM, Lazy.nvim)\n- [ ] No broken symlinks\n- [ ] Idempotency verified (can run multiple times)\n- [ ] Cross-platform compatibility (Ubuntu, Debian, macOS)\n- [ ] No secrets leaked in logs\n- [ ] Ansible playbooks pass lint\n- [ ] Shell scripts pass shellcheck\n\n## Continuous Testing Strategy\n\n1. Local testing during development\n2. Docker container testing before commit\n3. CI/CD testing on push to repository\n4. Molecule testing for Ansible roles\n5. Manual testing on fresh VM periodically",
      "namespace": "coordination",
      "timestamp": 1759281203801
    },
    {
      "key": "hive/research/summary",
      "value": "# Research Summary - Dotfiles-Ansible Project\n\n## Project Recommendations\n\n### Architecture Choice\n**Hybrid Approach**: Per-application directory structure + Ansible automation + GNU Stow/symlinks + Idempotent bootstrap script\n\n### Technology Stack\n1. **Ansible** (2.14+) - Cross-platform automation\n2. **Zinit** - Zsh plugin manager (performance optimized)\n3. **Lazy.nvim** - Neovim plugin manager\n4. **TPM** - Tmux Plugin Manager\n5. **Ansible Vault** - Secret management\n6. **Molecule** - Ansible testing framework\n7. **GitHub Actions** - CI/CD pipeline\n\n### Critical Success Factors\n\n1. **Idempotent Installation**: Bootstrap script must be safe to run multiple times\n2. **Cross-Platform Support**: Ubuntu, Debian, Arch, macOS via Ansible package module\n3. **Performance First**: Zinit for Zsh, init.lua for Neovim, optimized Tmux\n4. **Secure by Default**: Ansible Vault for secrets, .gitignore for sensitive files\n5. **Thoroughly Tested**: CI/CD, Molecule, validation scripts, Docker testing\n6. **Well Documented**: Installation guide, architecture docs, troubleshooting\n\n## Implementation Priority\n\n### Phase 1 (Foundation)\n1. Create folder structure (ansible/, dotfiles/, scripts/, tests/, docs/)\n2. Write idempotent bootstrap.sh script\n3. Set up Ansible playbooks and roles structure\n4. Configure .gitignore for secrets\n\n### Phase 2 (Core Tools)\n1. Zsh configuration with Zinit\n2. Neovim configuration with init.lua and Lazy.nvim\n3. Tmux configuration with TPM\n4. Git configuration\n\n### Phase 3 (Automation)\n1. Ansible playbooks for package installation\n2. Ansible roles for each tool (zsh, neovim, tmux, git)\n3. Ansible Vault for secret management\n4. Cross-platform package mapping\n\n### Phase 4 (Testing & CI/CD)\n1. Validation scripts for each component\n2. Idempotency testing\n3. GitHub Actions workflows\n4. Molecule testing for Ansible roles\n5. Docker-based testing\n\n### Phase 5 (Documentation)\n1. README with installation instructions\n2. Architecture documentation\n3. Troubleshooting guide\n4. Contributing guidelines\n\n## Key Decisions Made\n\n1. **Neovim**: Use init.lua (not init.vim) - modern standard for 2025\n2. **Zsh**: Use Zinit (not Oh-My-Zsh) - 50-80% faster startup\n3. **Tmux**: Use TPM for plugins, XDG-compliant config location\n4. **Secrets**: Use Ansible Vault (not plain text)\n5. **Testing**: Multi-level approach (CI/CD, Molecule, validation scripts)\n6. **Structure**: Per-application directories, never save to root folder\n\n## Package Equivalents Matrix Created\n\nComplete mapping of packages across apt, brew, and pacman for:\n- Core utilities (git, zsh, tmux, neovim)\n- Modern CLI tools (ripgrep, fd, bat, fzf)\n- Build tools (platform-specific)\n- Development tools (python3, nodejs, docker)\n\n## Risk Mitigation\n\n1. **Platform Differences**: Ansible conditional tasks based on package manager\n2. **Secret Exposure**: Comprehensive .gitignore, Ansible Vault encryption\n3. **Breaking Changes**: CI/CD testing on multiple platforms\n4. **Performance**: Lazy loading, async plugin loading, profiling tools\n5. **Maintenance**: Modular structure, clear documentation, automated testing",
      "namespace": "coordination",
      "timestamp": 1759281232245
    }
  ],
  "hive": [
    {
      "key": "hive/architecture/directory-structure",
      "value": "dotfiles-ansible/\n├── README.md                      # Project overview and quick start\n├── LICENSE                        # MIT License\n├── .gitignore                     # Git ignore patterns\n├── .editorconfig                  # Editor configuration\n│\n├── bootstrap.sh                   # Main bootstrap script (minimal dependencies)\n├── install.sh                     # Ansible installation helper\n│\n├── ansible.cfg                    # Ansible configuration\n├── requirements.yml               # Ansible Galaxy requirements\n├── site.yml                       # Main playbook entry point\n│\n├── inventory/\n│   ├── hosts.yml                  # Inventory with host groups\n│   └── group_vars/\n│       ├── all.yml                # Variables for all hosts\n│       ├── debian.yml             # Debian-specific variables\n│       ├── macos.yml              # macOS-specific variables\n│       └── arch.yml               # Arch Linux-specific variables\n│\n├── roles/\n│   ├── base/                      # Base system configuration\n│   │   ├── tasks/\n│   │   │   ├── main.yml           # Task dispatcher\n│   │   │   ├── debian.yml         # Debian-specific tasks\n│   │   │   ├── macos.yml          # macOS-specific tasks\n│   │   │   └── arch.yml           # Arch-specific tasks\n│   │   ├── vars/\n│   │   │   ├── main.yml           # Default variables\n│   │   │   ├── debian.yml         # Debian package names\n│   │   │   ├── macos.yml          # Homebrew package names\n│   │   │   └── arch.yml           # Arch package names\n│   │   ├── defaults/\n│   │   │   └── main.yml           # User-overridable defaults\n│   │   └── meta/\n│   │       └── main.yml           # Role metadata\n│   │\n│   ├── zsh/                       # Zsh configuration\n│   │   ├── tasks/\n│   │   │   ├── main.yml\n│   │   │   ├── install.yml        # Install zsh and dependencies\n│   │   │   ├── configure.yml      # Configure zsh\n│   │   │   └── plugins.yml        # Install plugins (zinit, fzf, etc.)\n│   │   ├── files/\n│   │   │   ├── .zshrc             # Main zsh configuration\n│   │   │   ├── .zshenv            # Environment variables\n│   │   │   ├── .zprofile          # Login shell configuration\n│   │   │   └── aliases.zsh        # Shell aliases\n│   │   ├── templates/\n│   │   │   └── .zshrc.j2          # Template with OS-specific logic\n│   │   ├── vars/\n│   │   │   └── main.yml           # Zsh-specific variables\n│   │   └── defaults/\n│   │       └── main.yml           # Default zsh settings\n│   │\n│   ├── tmux/                      # Tmux configuration\n│   │   ├── tasks/\n│   │   │   ├── main.yml\n│   │   │   ├── install.yml        # Install tmux\n│   │   │   ├── configure.yml      # Configure tmux\n│   │   │   └── plugins.yml        # Install TPM and plugins\n│   │   ├── files/\n│   │   │   └── .tmux.conf         # Tmux configuration\n│   │   ├── templates/\n│   │   │   └── .tmux.conf.j2      # Template with OS-specific logic\n│   │   ├── vars/\n│   │   │   └── main.yml\n│   │   └── defaults/\n│   │       └── main.yml\n│   │\n│   ├── neovim/                    # Neovim configuration\n│   │   ├── tasks/\n│   │   │   ├── main.yml\n│   │   │   ├── install.yml        # Install neovim\n│   │   │   ├── configure.yml      # Configure neovim\n│   │   │   └── plugins.yml        # Install plugin manager (lazy.nvim)\n│   │   ├── files/\n│   │   │   └── nvim/              # Neovim config directory\n│   │   │       ├── init.lua       # Main init file\n│   │   │       ├── lua/\n│   │   │       │   ├── config/    # General configuration\n│   │   │       │   │   ├── options.lua\n│   │   │       │   │   ├── keymaps.lua\n│   │   │       │   │   └── autocmds.lua\n│   │   │       │   └── plugins/   # Plugin configurations\n│   │   │       │       ├── init.lua\n│   │   │       │       ├── lsp.lua\n│   │   │       │       ├── treesitter.lua\n│   │   │       │       ├── telescope.lua\n│   │   │       │       └── ui.lua\n│   │   ├── vars/\n│   │   │   └── main.yml\n│   │   └── defaults/\n│   │       └── main.yml\n│   │\n│   ├── git/                       # Git configuration\n│   │   ├── tasks/\n│   │   │   ├── main.yml\n│   │   │   └── configure.yml\n│   │   ├── templates/\n│   │   │   └── .gitconfig.j2      # Template with user variables\n│   │   └── defaults/\n│   │       └── main.yml           # Git user defaults\n│   │\n│   └── packages/                  # Additional packages\n│       ├── tasks/\n│       │   ├── main.yml\n│       │   ├── development.yml    # Dev tools (build-essential, etc.)\n│       │   ├── utilities.yml      # CLI utilities (ripgrep, fd, bat, etc.)\n│       │   └── optional.yml       # Optional packages\n│       ├── vars/\n│       │   ├── debian.yml\n│       │   ├── macos.yml\n│       │   └── arch.yml\n│       └── defaults/\n│           └── main.yml\n│\n├── playbooks/\n│   ├── minimal.yml                # Minimal installation (base + zsh)\n│   ├── full.yml                   # Full installation (all roles)\n│   ├── update.yml                 # Update existing configuration\n│   └── uninstall.yml              # Rollback/uninstall playbook\n│\n├── tests/\n│   ├── test_debian.yml            # Debian test playbook\n│   ├── test_macos.yml             # macOS test playbook\n│   ├── test_arch.yml              # Arch test playbook\n│   ├── molecule/                  # Molecule tests\n│   │   └── default/\n│   │       ├── molecule.yml       # Molecule configuration\n│   │       ├── converge.yml       # Test playbook\n│   │       ├── verify.yml         # Verification tasks\n│   │       └── prepare.yml        # Test preparation\n│   └── Vagrantfile                # Vagrant test environment\n│\n├── scripts/\n│   ├── detect_os.sh               # OS detection utility\n│   ├── install_ansible.sh         # Ansible installation\n│   ├── backup.sh                  # Backup existing dotfiles\n│   └── restore.sh                 # Restore from backup\n│\n└── docs/\n    ├── ARCHITECTURE.md            # This architecture document\n    ├── CUSTOMIZATION.md           # How to customize\n    ├── TROUBLESHOOTING.md         # Common issues and solutions\n    ├── DEVELOPMENT.md             # Development guide\n    └── TESTING.md                 # Testing guide",
      "namespace": "hive",
      "timestamp": 1759281132298
    },
    {
      "key": "hive/architecture/ansible-roles",
      "value": "# Ansible Roles Architecture\n\n## Role Organization Principles\n\n### 1. Base Role (Foundation)\n**Purpose**: System-level configuration and base package installation\n**Dependencies**: None\n**Idempotency**: Uses package managers' native idempotency\n\nTasks:\n- Detect OS and distribution\n- Update package manager cache\n- Install base packages (curl, git, build-essential/xcode, etc.)\n- Set system-wide configurations\n- Create necessary directories (~/.local/bin, ~/.config, etc.)\n\nVariables:\n- `base_packages`: List of base packages per OS\n- `base_directories`: Directories to create\n- `system_timezone`: System timezone setting\n\n### 2. Zsh Role\n**Purpose**: Install and configure Zsh with plugins and themes\n**Dependencies**: base\n**Idempotency**: Checks if zsh is default shell, configs exist\n\nTasks:\n- Install zsh package\n- Install zinit (plugin manager)\n- Install fzf (fuzzy finder)\n- Configure .zshrc, .zshenv, .zprofile\n- Install essential plugins (fast-syntax-highlighting, autosuggestions, etc.)\n- Set zsh as default shell (optional, user-controlled)\n\nVariables:\n- `zsh_install_zinit`: Enable/disable zinit\n- `zsh_install_fzf`: Enable/disable fzf\n- `zsh_set_default_shell`: Set as default shell\n- `zsh_plugins`: List of plugins to install\n- `zsh_theme`: Theme to use\n\nFiles:\n- `.zshrc`: Main configuration\n- `.zshenv`: Environment variables\n- `aliases.zsh`: Shell aliases\n\n### 3. Tmux Role\n**Purpose**: Install and configure tmux with TPM\n**Dependencies**: base\n**Idempotency**: Checks for existing configs and TPM installation\n\nTasks:\n- Install tmux package\n- Install TPM (Tmux Plugin Manager)\n- Deploy .tmux.conf\n- Install configured plugins\n- Configure key bindings and behavior\n\nVariables:\n- `tmux_install_tpm`: Enable/disable TPM\n- `tmux_prefix`: Prefix key (default: C-a)\n- `tmux_mouse_mode`: Enable mouse mode\n- `tmux_plugins`: List of TPM plugins\n\nFiles:\n- `.tmux.conf`: Main configuration\n\n### 4. Neovim Role\n**Purpose**: Install Neovim and configure with Lua\n**Dependencies**: base, git\n**Idempotency**: Checks for nvim installation and config existence\n\nTasks:\n- Install neovim (latest stable or from source)\n- Install lazy.nvim (plugin manager)\n- Deploy Lua configuration\n- Install LSP servers (optional)\n- Install tree-sitter parsers\n- Configure plugins and keymaps\n\nVariables:\n- `neovim_version`: Version to install (stable/nightly)\n- `neovim_install_from_source`: Build from source\n- `neovim_lsp_servers`: List of LSP servers to install\n- `neovim_plugins`: Plugin configuration\n\nFiles:\n- `nvim/init.lua`: Entry point\n- `nvim/lua/config/*`: Core configuration\n- `nvim/lua/plugins/*`: Plugin configurations\n\n### 5. Git Role\n**Purpose**: Configure Git with user preferences\n**Dependencies**: base\n**Idempotency**: Only updates if template variables change\n\nTasks:\n- Install git (via base role)\n- Deploy .gitconfig from template\n- Configure git aliases\n- Set user name and email\n- Configure default branch, editor, etc.\n\nVariables:\n- `git_user_name`: User's name\n- `git_user_email`: User's email\n- `git_default_branch`: Default branch name (main)\n- `git_editor`: Default editor (nvim)\n- `git_aliases`: Custom aliases\n\nTemplates:\n- `.gitconfig.j2`: Template with user variables\n\n### 6. Packages Role\n**Purpose**: Install additional CLI tools and utilities\n**Dependencies**: base\n**Idempotency**: Package manager handles this\n\nTasks:\n- Install development tools (language runtimes, etc.)\n- Install CLI utilities (ripgrep, fd, bat, exa, delta, etc.)\n- Install optional packages (Docker, Node.js, Python, etc.)\n\nVariables:\n- `packages_dev_tools`: Development packages\n- `packages_utilities`: CLI utilities\n- `packages_optional`: Optional packages\n- `packages_*_enabled`: Enable/disable package groups\n\n## Role Execution Order\n\n1. **base** - System foundation\n2. **packages** - Additional tools (parallel with below)\n3. **git** - Version control (parallel with below)\n4. **zsh** - Shell environment\n5. **tmux** - Terminal multiplexer\n6. **neovim** - Text editor\n\n## OS-Specific Handling Strategy\n\n### Task-Level Dispatching\nEach role uses task dispatching based on ansible_facts:\n\n```yaml\n# roles/zsh/tasks/main.yml\n- name: Include OS-specific tasks\n  include_tasks: \"{{ ansible_os_family | lower }}.yml\"\n  when: ansible_os_family in ['Debian', 'Darwin', 'Archlinux']\n```\n\n### Variable Overrides\nOS-specific variables in group_vars and role vars:\n\n```yaml\n# group_vars/debian.yml\nbase_packages:\n  - build-essential\n  - curl\n  - git\n\n# group_vars/macos.yml\nbase_packages:\n  - coreutils\n  - curl\n  - git\n```\n\n### Template Conditionals\nTemplates use Jinja2 conditionals for OS-specific sections:\n\n```jinja\n{% if ansible_os_family == \"Darwin\" %}\nexport PATH=\"/usr/local/bin:$PATH\"\n{% endif %}\n```\n\n## Idempotency Strategies\n\n### 1. Package Installation\n- Use `state: present` (default idempotent behavior)\n- Check if package is already installed before updating\n\n### 2. File Deployment\n- Use `creates` parameter when possible\n- Check file existence before copying\n- Use checksums to detect changes\n\n### 3. Service Management\n- Check service state before restarting\n- Use handlers for service restarts\n\n### 4. Shell Commands\n- Use `creates` or `removes` parameters\n- Check command output before execution\n- Use `changed_when` to control change status\n\n### 5. Plugin Installation\n- Check if plugin directory exists\n- Verify plugin is already cloned before cloning\n\nExample:\n```yaml\n- name: Install zinit\n  git:\n    repo: https://github.com/zdharma-continuum/zinit.git\n    dest: \"{{ ansible_env.HOME }}/.local/share/zinit/zinit.git\"\n    depth: 1\n  register: zinit_install\n  when: not zinit_installed.stat.exists\n```\n\n## Testing Strategy\n\n### 1. Molecule (Docker-based)\n- Test each role independently\n- Test on multiple OS images (debian, ubuntu, archlinux)\n- Verify idempotency (run twice, second should have 0 changes)\n\n### 2. Vagrant (VM-based)\n- Full integration testing\n- Test complete playbook on each OS\n- Verify all configurations work together\n\n### 3. Manual Testing\n- macOS testing (Molecule doesn't support macOS containers)\n- Real hardware testing\n- User acceptance testing\n\n## Tags for Selective Execution\n\nEach role supports tags:\n- `base` - Base role\n- `zsh` - Zsh role\n- `tmux` - Tmux role\n- `neovim` - Neovim role\n- `git` - Git role\n- `packages` - Packages role\n- `install` - Installation tasks only\n- `configure` - Configuration tasks only\n- `plugins` - Plugin installation\n\nUsage:\n```bash\nansible-playbook site.yml --tags \"zsh,tmux\"\nansible-playbook site.yml --skip-tags \"neovim\"\n```",
      "namespace": "hive",
      "timestamp": 1759281134592
    },
    {
      "key": "hive/architecture/bootstrap-flow",
      "value": "# Bootstrap Flow Architecture\n\n## Overview\nThe bootstrap process is designed to be minimal, safe, and idempotent. It handles OS detection, dependency installation, and Ansible execution.\n\n## Bootstrap Workflow\n\n```\n┌─────────────────────────────────────────────────────────────────┐\n│                         START BOOTSTRAP                          │\n└────────────────────────────┬────────────────────────────────────┘\n                             │\n                             ▼\n┌─────────────────────────────────────────────────────────────────┐\n│  Step 1: Pre-flight Checks                                       │\n│  ├─ Verify script is not run as root                            │\n│  ├─ Check internet connectivity                                 │\n│  ├─ Detect OS (Debian/Ubuntu, macOS, Arch Linux)                │\n│  └─ Validate supported OS version                               │\n└────────────────────────────┬────────────────────────────────────┘\n                             │\n                             ▼\n┌─────────────────────────────────────────────────────────────────┐\n│  Step 2: Backup Existing Dotfiles                               │\n│  ├─ Create backup directory (~/.dotfiles.backup.<timestamp>)    │\n│  ├─ Backup .zshrc, .tmux.conf, .config/nvim, .gitconfig         │\n│  └─ Log backup location                                         │\n└────────────────────────────┬────────────────────────────────────┘\n                             │\n                             ▼\n┌─────────────────────────────────────────────────────────────────┐\n│  Step 3: Install Dependencies                                    │\n│  ├─ Update package manager cache                                │\n│  ├─ Install git (if not present)                                │\n│  ├─ Install Python3 and pip (if not present)                    │\n│  └─ OS-specific dependency installation                         │\n│     ├─ Debian/Ubuntu: apt-get update && apt-get install         │\n│     ├─ macOS: Install Homebrew if needed, brew install          │\n│     └─ Arch: pacman -S                                          │\n└────────────────────────────┬────────────────────────────────────┘\n                             │\n                             ▼\n┌─────────────────────────────────────────────────────────────────┐\n│  Step 4: Install Ansible                                         │\n│  ├─ Check if Ansible is already installed                       │\n│  ├─ Install Ansible via package manager or pip                  │\n│  │   ├─ Debian/Ubuntu: apt-get install ansible                  │\n│  │   ├─ macOS: brew install ansible                             │\n│  │   ├─ Arch: pacman -S ansible                                 │\n│  │   └─ Fallback: pip3 install --user ansible                   │\n│  └─ Verify Ansible installation (ansible --version)             │\n└────────────────────────────┬────────────────────────────────────┘\n                             │\n                             ▼\n┌─────────────────────────────────────────────────────────────────┐\n│  Step 5: Install Ansible Galaxy Dependencies                    │\n│  ├─ ansible-galaxy collection install -r requirements.yml       │\n│  └─ ansible-galaxy role install -r requirements.yml             │\n└────────────────────────────┬────────────────────────────────────┘\n                             │\n                             ▼\n┌─────────────────────────────────────────────────────────────────┐\n│  Step 6: Run Ansible Playbook                                    │\n│  ├─ Detect playbook to run (minimal vs full)                    │\n│  ├─ Set ansible variables from environment/prompts              │\n│  │   ├─ Git user name (git config or prompt)                    │\n│  │   ├─ Git user email (git config or prompt)                   │\n│  │   └─ Installation profile (minimal/full)                     │\n│  ├─ Execute: ansible-playbook site.yml -i inventory/hosts.yml   │\n│  │   --extra-vars \"profile=full git_user_name='John' ...\"       │\n│  └─ Stream output to terminal with progress indication          │\n└────────────────────────────┬────────────────────────────────────┘\n                             │\n                             ▼\n┌─────────────────────────────────────────────────────────────────┐\n│  Step 7: Post-Installation                                       │\n│  ├─ Display installation summary                                │\n│  ├─ Show next steps (shell reload, plugin installation, etc.)   │\n│  ├─ Provide rollback instructions if needed                     │\n│  └─ Log installation to ~/.dotfiles_install.log                 │\n└────────────────────────────┬────────────────────────────────────┘\n                             │\n                             ▼\n┌─────────────────────────────────────────────────────────────────┐\n│                      INSTALLATION COMPLETE                       │\n└─────────────────────────────────────────────────────────────────┘\n```\n\n## Bootstrap Script Structure\n\n```bash\n#!/usr/bin/env bash\n# bootstrap.sh - Dotfiles installation bootstrap\n\nset -e  # Exit on error\nset -u  # Exit on undefined variable\nset -o pipefail  # Exit on pipe failure\n\n# Configuration\nDOTFILES_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nBACKUP_DIR=\"$HOME/.dotfiles.backup.$(date +%Y%m%d_%H%M%S)\"\nLOG_FILE=\"$HOME/.dotfiles_install.log\"\n\n# Color output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Logging functions\nlog_info() { echo -e \"${GREEN}[INFO]${NC} $*\" | tee -a \"$LOG_FILE\"; }\nlog_warn() { echo -e \"${YELLOW}[WARN]${NC} $*\" | tee -a \"$LOG_FILE\"; }\nlog_error() { echo -e \"${RED}[ERROR]${NC} $*\" | tee -a \"$LOG_FILE\"; }\n\n# Main functions\nmain() {\n    log_info \"Starting dotfiles installation...\"\n    preflight_checks\n    backup_dotfiles\n    install_dependencies\n    install_ansible\n    install_galaxy_deps\n    run_playbook\n    post_install\n}\n\npreflight_checks() { ... }\ndetect_os() { ... }\nbackup_dotfiles() { ... }\ninstall_dependencies() { ... }\ninstall_ansible() { ... }\ninstall_galaxy_deps() { ... }\nrun_playbook() { ... }\npost_install() { ... }\n\n# Execute main\nmain \"$@\"\n```\n\n## Installation Profiles\n\n### Minimal Profile\n- Base system packages\n- Zsh with basic configuration\n- Git configuration\n- Essential CLI tools\n\nExecution:\n```bash\n./bootstrap.sh --profile minimal\n```\n\n### Full Profile (Default)\n- All minimal profile features\n- Tmux with plugins\n- Neovim with complete configuration\n- Additional development tools\n- All optional packages\n\nExecution:\n```bash\n./bootstrap.sh --profile full\n# or simply\n./bootstrap.sh\n```\n\n### Custom Profile\n- User-specified roles and tags\n\nExecution:\n```bash\n./bootstrap.sh --tags \"zsh,tmux,git\"\n```\n\n## User Interaction\n\n### Non-Interactive Mode\n```bash\n./bootstrap.sh --non-interactive \\\n  --git-name \"John Doe\" \\\n  --git-email \"john@example.com\" \\\n  --profile full\n```\n\n### Interactive Mode (Default)\nPrompts for:\n1. Installation profile (minimal/full/custom)\n2. Git user name (if not in git config)\n3. Git user email (if not in git config)\n4. Set zsh as default shell (yes/no)\n5. Optional components to install\n\n## Error Handling\n\n### Rollback Strategy\nIf installation fails:\n1. Display error message and log location\n2. Offer to restore from backup\n3. Provide manual rollback instructions\n\n```bash\n./scripts/restore.sh --from-backup ~/.dotfiles.backup.20231001_120000\n```\n\n### Retry Logic\n- Package installation: Retry up to 3 times with exponential backoff\n- Network operations: Check connectivity before retrying\n- Ansible playbook: Continue on non-critical errors\n\n## Idempotency\n\nThe bootstrap script is fully idempotent:\n- Can be run multiple times safely\n- Updates existing configurations\n- Skips already-installed components\n- Preserves user customizations (via .gitignore patterns)\n\n## Dependencies\n\n### Minimal Required\n- Bash 4.0+\n- curl or wget\n- Internet connection\n\n### Automatically Installed\n- Git\n- Python 3.6+\n- Pip\n- Ansible 2.9+\n\n## OS-Specific Considerations\n\n### Debian/Ubuntu\n- Uses apt-get for package management\n- Requires sudo privileges for system packages\n- Supports Ubuntu 20.04+ and Debian 11+\n\n### macOS\n- Installs Homebrew if not present\n- Uses brew for package management\n- Requires Xcode Command Line Tools\n- Supports macOS 11.0+ (Big Sur and later)\n\n### Arch Linux\n- Uses pacman for package management\n- Supports AUR helper (yay) if installed\n- Rolling release support\n\n## Post-Installation\n\n### Shell Integration\n```bash\n# Reload shell\nexec zsh\n\n# Or manually source\nsource ~/.zshrc\n```\n\n### Plugin Installation\nSome plugins may require manual first-run:\n- Tmux: `prefix + I` to install TPM plugins\n- Neovim: Lazy.nvim auto-installs on first launch\n\n### Verification\n```bash\n# Run verification playbook\nansible-playbook playbooks/verify.yml\n```\n\n## Logging\n\nAll operations logged to:\n- `~/.dotfiles_install.log` - Installation log\n- `/tmp/dotfiles_ansible.log` - Ansible verbose log\n\n## Performance\n\nExpected installation time:\n- Minimal profile: 2-5 minutes\n- Full profile: 5-15 minutes\n\nFactors affecting speed:\n- Network speed (downloading packages)\n- System specifications\n- Number of plugins to install",
      "namespace": "hive",
      "timestamp": 1759281137296
    },
    {
      "key": "hive/architecture/summary",
      "value": "# Dotfiles Repository Architecture Summary\n\n## Design Principles\n1. **Modularity**: Separate concerns into distinct Ansible roles\n2. **Idempotency**: Safe to run multiple times without side effects\n3. **Cross-platform**: Support Debian, macOS, and Arch Linux\n4. **Minimal Dependencies**: Bootstrap requires only bash, curl, and internet\n5. **User-Friendly**: Interactive and non-interactive installation modes\n6. **Testable**: Comprehensive testing with Molecule and Vagrant\n7. **Extensible**: Easy to add new roles and configurations\n\n## Core Components\n\n### 1. Bootstrap System\n- **bootstrap.sh**: Main entry point with minimal dependencies\n- **Pre-flight checks**: OS detection, connectivity, user validation\n- **Backup strategy**: Automatic backup of existing dotfiles\n- **Error handling**: Rollback capability and retry logic\n- **Logging**: Comprehensive logging for troubleshooting\n\n### 2. Ansible Structure\n- **6 Core Roles**: base, zsh, tmux, neovim, git, packages\n- **OS-Specific Handling**: Task dispatching and variable overrides\n- **Inventory Organization**: Group variables for each OS\n- **Tag Support**: Selective role execution\n- **Galaxy Integration**: External dependency management\n\n### 3. Configuration Management\n- **Files**: Static configuration files\n- **Templates**: Dynamic configs with Jinja2 variables\n- **Variables**: Layered defaults (role defaults → group_vars → extra_vars)\n- **Handlers**: Event-driven service management\n\n### 4. Testing Framework\n- **Molecule**: Docker-based role testing with idempotency checks\n- **Vagrant**: Full VM-based integration testing\n- **Manual Testing**: macOS and hardware validation\n\n## Directory Organization\n\n```\ndotfiles-ansible/\n├── Core Files (bootstrap.sh, ansible.cfg, site.yml)\n├── inventory/ (hosts and group variables)\n├── roles/ (6 modular roles)\n├── playbooks/ (minimal, full, update, uninstall)\n├── tests/ (molecule, vagrant, OS-specific tests)\n├── scripts/ (utility scripts)\n└── docs/ (comprehensive documentation)\n```\n\n## Role Dependencies\n\n```\nbase (foundation)\n├── packages (parallel)\n├── git (parallel)\n└── zsh → tmux → neovim (sequential)\n```\n\n## Installation Profiles\n\n1. **Minimal**: base + zsh + git + essential tools (2-5 min)\n2. **Full**: All roles + plugins + optional packages (5-15 min)\n3. **Custom**: User-selected roles via tags\n\n## OS Support Strategy\n\n### Debian/Ubuntu\n- Package manager: apt-get\n- Build tools: build-essential\n- Python: python3-pip\n\n### macOS\n- Package manager: Homebrew (auto-installed)\n- Build tools: Xcode Command Line Tools\n- Python: Homebrew python3\n\n### Arch Linux\n- Package manager: pacman\n- Build tools: base-devel\n- AUR helper: yay (optional)\n\n## Idempotency Mechanisms\n\n1. **Package Installation**: Native package manager state management\n2. **File Deployment**: Checksum-based change detection\n3. **Plugin Installation**: Directory existence checks\n4. **Service Management**: State-aware handlers\n5. **Shell Commands**: Conditional execution with creates/removes\n\n## Testing Strategy\n\n### Unit Testing (Molecule)\n- Per-role testing in isolated containers\n- Multiple OS images (debian:12, ubuntu:22.04, archlinux:latest)\n- Idempotency verification (second run = 0 changes)\n\n### Integration Testing (Vagrant)\n- Full playbook on actual VMs\n- Cross-role interaction validation\n- End-to-end workflow testing\n\n### Manual Testing\n- macOS validation (no container support)\n- Real hardware compatibility\n- User experience validation\n\n## Key Decisions\n\n1. **Ansible over shell scripts**: Better idempotency and cross-platform support\n2. **Role-based architecture**: Clear separation of concerns\n3. **Template over static files**: OS-specific customization\n4. **Zinit over Oh My Zsh**: Faster, more modular plugin management\n5. **Lazy.nvim over Packer**: Modern, async plugin management\n6. **TPM for tmux**: Standard plugin manager with community support\n\n## Extension Points\n\n1. **New Roles**: Add to roles/ directory, update site.yml\n2. **New OS Support**: Add group_vars and OS-specific tasks\n3. **Custom Packages**: Modify packages role variables\n4. **Plugin Management**: Update role defaults for zsh/tmux/nvim\n5. **Additional Playbooks**: Create in playbooks/ directory\n\n## Performance Optimizations\n\n1. **Parallel Execution**: Independent roles run in parallel\n2. **Shallow Clones**: Git depth=1 for plugin repos\n3. **Caching**: Package manager cache updates\n4. **Lazy Loading**: Zsh plugins loaded on-demand\n5. **Minimal Downloads**: Only required dependencies\n\n## Security Considerations\n\n1. **No Root Bootstrap**: Script refuses to run as root\n2. **Backup Before Changes**: Automatic rollback capability\n3. **Template Variables**: User data not hardcoded\n4. **HTTPS Only**: All downloads over secure connections\n5. **Package Verification**: Use official package sources\n\n## Maintenance Strategy\n\n1. **Version Pinning**: requirements.yml for Galaxy dependencies\n2. **Testing Before Merge**: All changes tested on 3 OS platforms\n3. **Documentation Updates**: Sync with code changes\n4. **Changelog**: Track all breaking changes\n5. **Issue Templates**: Standardized bug reports and feature requests",
      "namespace": "hive",
      "timestamp": 1759281140148
    },
    {
      "key": "hive/architecture/decisions",
      "value": "# Architecture Decision Records (ADR)\n\n## ADR-001: Use Ansible Instead of Shell Scripts\n\n**Status**: Accepted\n\n**Context**: Need cross-platform dotfiles management for Debian, macOS, and Arch Linux.\n\n**Decision**: Use Ansible as the primary automation tool instead of pure shell scripts.\n\n**Rationale**:\n- Native idempotency support (packages, files, services)\n- Cross-platform abstraction (same playbook, different OS)\n- Better error handling and rollback capabilities\n- Template support for OS-specific configurations\n- Community modules for common tasks\n- Testability with Molecule and Vagrant\n\n**Consequences**:\n- Requires Ansible installation (handled by bootstrap)\n- Slightly more complex than shell scripts\n- Better maintainability and extensibility\n- Easier to add new OS support\n\n## ADR-002: Role-Based Architecture\n\n**Status**: Accepted\n\n**Context**: Need to organize configurations for multiple tools (zsh, tmux, neovim, git).\n\n**Decision**: Use Ansible role-based architecture with one role per tool.\n\n**Rationale**:\n- Clear separation of concerns\n- Independent testing per role\n- Easy to enable/disable components\n- Reusable across different projects\n- Standard Ansible best practice\n\n**Consequences**:\n- More directories and structure\n- Requires understanding Ansible roles\n- Better organization and maintainability\n- Easier to contribute new roles\n\n## ADR-003: Zinit Over Oh My Zsh\n\n**Status**: Accepted\n\n**Context**: Need plugin management for Zsh shell.\n\n**Decision**: Use zinit instead of Oh My Zsh.\n\n**Rationale**:\n- 50-80x faster startup time\n- Lazy loading support\n- More granular control over plugins\n- Smaller footprint\n- Turbo mode for async loading\n- Better performance metrics\n\n**Consequences**:\n- Less familiar than Oh My Zsh\n- Requires manual plugin configuration\n- Much faster shell startup\n- More flexible plugin management\n\n## ADR-004: Lazy.nvim Over Packer\n\n**Status**: Accepted\n\n**Context**: Need plugin management for Neovim.\n\n**Decision**: Use lazy.nvim instead of Packer.\n\n**Rationale**:\n- Modern, actively maintained\n- Async plugin loading\n- Built-in lazy loading\n- Better UI and progress indication\n- Faster startup time\n- Simpler configuration syntax\n\n**Consequences**:\n- Requires Neovim 0.8+\n- Different configuration style than Packer\n- Better performance and UX\n- Active development and support\n\n## ADR-005: Template Files for OS-Specific Configs\n\n**Status**: Accepted\n\n**Context**: Need different configurations for different operating systems.\n\n**Decision**: Use Jinja2 templates instead of separate static files per OS.\n\n**Rationale**:\n- Single source of truth\n- Conditional logic for OS differences\n- Variable substitution (user name, email, etc.)\n- Easier to maintain consistency\n- Less file duplication\n\n**Consequences**:\n- Requires understanding Jinja2 syntax\n- Slightly more complex than static files\n- Better maintainability\n- Easier to add OS-specific sections\n\n## ADR-006: Molecule and Vagrant for Testing\n\n**Status**: Accepted\n\n**Context**: Need automated testing for multiple operating systems.\n\n**Decision**: Use Molecule for role testing and Vagrant for integration testing.\n\n**Rationale**:\n- Molecule: Fast Docker-based testing, idempotency verification\n- Vagrant: Full VM testing for integration scenarios\n- Both support multiple OS testing\n- Industry standard tools\n- CI/CD integration\n\n**Consequences**:\n- Requires Docker and Vagrant installation for developers\n- Increased test complexity\n- Better code quality and confidence\n- Catches issues before production\n\n## ADR-007: Minimal Bootstrap Script\n\n**Status**: Accepted\n\n**Context**: Users need to run bootstrap without pre-installed tools.\n\n**Decision**: Create minimal bootstrap.sh that only requires bash and curl.\n\n**Rationale**:\n- Works on fresh OS installations\n- Automatically installs dependencies\n- Handles OS detection\n- User-friendly error messages\n- Idempotent and safe to re-run\n\n**Consequences**:\n- Additional script to maintain\n- Must test on all platforms\n- Better user experience\n- Lower barrier to entry\n\n## ADR-008: Backup Before Installation\n\n**Status**: Accepted\n\n**Context**: Users may have existing dotfiles that could be overwritten.\n\n**Decision**: Automatically backup existing dotfiles before installation.\n\n**Rationale**:\n- Safety: Users can rollback if needed\n- Trust: Users more willing to try\n- Timestamped backups for history\n- Simple restore process\n\n**Consequences**:\n- Additional disk space used\n- Backup script maintenance\n- User confidence and safety\n- Easy rollback process\n\n## ADR-009: Group Variables for OS-Specific Packages\n\n**Status**: Accepted\n\n**Context**: Package names differ across operating systems.\n\n**Decision**: Use inventory group_vars for OS-specific package names.\n\n**Rationale**:\n- Centralized OS-specific data\n- Easy to update package lists\n- Clear what differs per OS\n- Ansible best practice\n- No code duplication in roles\n\n**Consequences**:\n- Additional files in inventory/group_vars\n- Need to maintain consistency\n- Better organization\n- Easier to add new OS\n\n## ADR-010: Tag-Based Execution\n\n**Status**: Accepted\n\n**Context**: Users may want to install only specific components.\n\n**Decision**: Implement comprehensive tagging system for selective execution.\n\n**Rationale**:\n- User choice and flexibility\n- Faster partial installations\n- Useful for updates (only changed components)\n- Testing individual roles\n- Standard Ansible feature\n\n**Consequences**:\n- Must maintain tags consistently\n- Documentation overhead\n- Better user control\n- Faster workflows\n\n## ADR-011: Installation Profiles (Minimal vs Full)\n\n**Status**: Accepted\n\n**Context**: Different users have different needs (minimal vs complete setup).\n\n**Decision**: Provide minimal and full installation profiles.\n\n**Rationale**:\n- Minimal: Fast, essential tools only (servers, minimal environments)\n- Full: Complete development environment (workstations)\n- Clear user choice\n- Faster minimal installation\n- Both tested and maintained\n\n**Consequences**:\n- Need to maintain both profiles\n- Documentation for both paths\n- Better user experience\n- Flexibility for different use cases\n\n## ADR-012: Documentation-First Approach\n\n**Status**: Accepted\n\n**Context**: Complex system with multiple components and OS support.\n\n**Decision**: Create comprehensive documentation before implementation.\n\n**Rationale**:\n- Clear understanding before coding\n- Better architecture decisions\n- Easier for contributors\n- Reduces rework\n- Serves as specification\n\n**Consequences**:\n- Upfront documentation effort\n- Must keep docs in sync with code\n- Better project understanding\n- Easier onboarding",
      "namespace": "hive",
      "timestamp": 1759281142460
    },
    {
      "key": "hive/architecture/visual-summary",
      "value": "# Dotfiles Repository - Architecture Visual Summary\n\n## System Overview\n\n```\n┌─────────────────────────────────────────────────────────────────┐\n│                    DOTFILES REPOSITORY                           │\n│                   Cross-Platform Automation                      │\n└─────────────────────────────────────────────────────────────────┘\n                              │\n                              ▼\n        ┌─────────────────────────────────────────┐\n        │         bootstrap.sh                     │\n        │  (Minimal dependencies: bash, curl)      │\n        └─────────────────┬───────────────────────┘\n                          │\n                          ▼\n        ┌─────────────────────────────────────────┐\n        │    OS Detection & Dependency Install     │\n        │  • Debian/Ubuntu → apt-get               │\n        │  • macOS → Homebrew                      │\n        │  • Arch Linux → pacman                   │\n        └─────────────────┬───────────────────────┘\n                          │\n                          ▼\n        ┌─────────────────────────────────────────┐\n        │       Install Ansible                    │\n        │  (Package manager or pip3)               │\n        └─────────────────┬───────────────────────┘\n                          │\n                          ▼\n        ┌─────────────────────────────────────────┐\n        │    Run Ansible Playbook (site.yml)      │\n        └─────────────────┬───────────────────────┘\n                          │\n          ┌───────────────┼───────────────┐\n          │               │               │\n          ▼               ▼               ▼\n    ┌─────────┐    ┌─────────┐    ┌─────────┐\n    │ Minimal │    │  Full   │    │ Custom  │\n    │ Profile │    │ Profile │    │  Tags   │\n    └─────────┘    └─────────┘    └─────────┘\n```\n\n## Role Architecture\n\n```\n┌──────────────────────────────────────────────────────────────┐\n│                        ANSIBLE ROLES                          │\n└──────────────────────────────────────────────────────────────┘\n\n    ┌─────────────────┐\n    │   BASE ROLE     │  ← Foundation (no dependencies)\n    │                 │\n    │  • OS Detection │\n    │  • Base Packages│\n    │  • Directories  │\n    └────────┬────────┘\n             │\n             ├──────────────┬──────────────┬─────────────┐\n             │              │              │             │\n             ▼              ▼              ▼             ▼\n    ┌────────────┐  ┌────────────┐  ┌──────────┐  ┌──────────┐\n    │    GIT     │  │  PACKAGES  │  │   ZSH    │  │   TMUX   │\n    │            │  │            │  │          │  │          │\n    │ • .gitconfig│  │ • Dev Tools│  │ • Zinit  │  │ • TPM    │\n    │ • Aliases  │  │ • CLI Utils│  │ • Plugins│  │ • Plugins│\n    │            │  │ • Optional │  │ • Themes │  │ • Config │\n    └────────────┘  └────────────┘  └─────┬────┘  └─────┬────┘\n                                          │             │\n                                          └──────┬──────┘\n                                                 │\n                                                 ▼\n                                          ┌──────────┐\n                                          │  NEOVIM  │\n                                          │          │\n                                          │ • Lazy   │\n                                          │ • LSP    │\n                                          │ • Plugins│\n                                          └──────────┘\n```\n\n## Data Flow\n\n```\n┌──────────────────────────────────────────────────────────────┐\n│                      VARIABLE HIERARCHY                       │\n└──────────────────────────────────────────────────────────────┘\n\n    Lower Priority                              Higher Priority\n    ──────────────────────────────────────────────────────────→\n\n    ┌──────────────┐    ┌──────────────┐    ┌──────────────┐\n    │ Role Defaults│ →  │  Group Vars  │ →  │  Extra Vars  │\n    │              │    │              │    │              │\n    │ roles/*/     │    │ inventory/   │    │ Command Line │\n    │ defaults/    │    │ group_vars/  │    │ --extra-vars │\n    └──────────────┘    └──────────────┘    └──────────────┘\n\nExample:\n  zsh_install_fzf: true (role default)\n       ↓\n  zsh_install_fzf: true (group_vars/debian.yml)\n       ↓\n  zsh_install_fzf: false (--extra-vars \"zsh_install_fzf=false\")\n  ✓ Final value: false\n```\n\n## File Deployment Strategy\n\n```\n┌──────────────────────────────────────────────────────────────┐\n│                    FILE DEPLOYMENT                            │\n└──────────────────────────────────────────────────────────────┘\n\nStatic Files:                Template Files:\n┌─────────────┐             ┌──────────────────┐\n│ roles/zsh/  │             │ roles/git/       │\n│ files/      │             │ templates/       │\n│             │             │                  │\n│ .zshrc      │             │ .gitconfig.j2    │\n│ aliases.zsh │             │                  │\n└──────┬──────┘             └────────┬─────────┘\n       │                             │\n       │ (copy as-is)                │ (render with vars)\n       │                             │\n       ▼                             ▼\n┌──────────────────────────────────────────┐\n│        USER HOME DIRECTORY                │\n│                                           │\n│  ~/.zshrc                                 │\n│  ~/.gitconfig (with user name/email)     │\n└───────────────────────────────────────────┘\n```\n\n## Testing Pipeline\n\n```\n┌──────────────────────────────────────────────────────────────┐\n│                      TESTING PYRAMID                          │\n└──────────────────────────────────────────────────────────────┘\n\n                         ┌──────────────┐\n                         │   Manual     │  macOS, Hardware\n                         │   Testing    │  User Acceptance\n                         └──────┬───────┘\n                                │\n                       ┌────────┴────────┐\n                       │   Integration   │  Vagrant VMs\n                       │   Testing       │  Full Playbook\n                       └────────┬────────┘\n                                │\n                  ┌─────────────┴─────────────┐\n                  │      Molecule Tests       │  Docker Containers\n                  │  (Per-Role + Idempotency) │  Multiple OS Images\n                  └───────────────────────────┘\n\nTest Matrix:\n┌─────────┬──────────┬──────────┬──────────┐\n│  Role   │  Debian  │  Ubuntu  │   Arch   │\n├─────────┼──────────┼──────────┼──────────┤\n│  base   │    ✓     │    ✓     │    ✓     │\n│  zsh    │    ✓     │    ✓     │    ✓     │\n│  tmux   │    ✓     │    ✓     │    ✓     │\n│  neovim │    ✓     │    ✓     │    ✓     │\n│  git    │    ✓     │    ✓     │    ✓     │\n│ packages│    ✓     │    ✓     │    ✓     │\n└─────────┴──────────┴──────────┴──────────┘\n```\n\n## Package Management per OS\n\n```\n┌──────────────────────────────────────────────────────────────┐\n│                   OS-SPECIFIC HANDLING                        │\n└──────────────────────────────────────────────────────────────┘\n\nDebian/Ubuntu          macOS               Arch Linux\n────────────────       ─────────────       ────────────────\nPackage Manager:       Package Manager:    Package Manager:\n  apt-get                Homebrew            pacman\n\nBuild Tools:           Build Tools:        Build Tools:\n  build-essential        Xcode CLI Tools     base-devel\n\nPython:                Python:             Python:\n  python3-pip            brew python3        python-pip\n\nExample Package Mappings:\n┌──────────────┬────────────────┬───────────────┬─────────────┐\n│   Function   │    Debian      │     macOS     │    Arch     │\n├──────────────┼────────────────┼───────────────┼─────────────┤\n│ File Search  │  fd-find       │  fd           │  fd         │\n│ Text Search  │  ripgrep       │  ripgrep      │  ripgrep    │\n│ Cat Clone    │  bat           │  bat          │  bat        │\n│ LS Clone     │  exa           │  exa          │  exa        │\n│ Diff Tool    │  git-delta     │  git-delta    │  git-delta  │\n└──────────────┴────────────────┴───────────────┴─────────────┘\n```\n\n## Idempotency Guarantees\n\n```\n┌──────────────────────────────────────────────────────────────┐\n│                   IDEMPOTENCY CHECKS                          │\n└──────────────────────────────────────────────────────────────┘\n\nFirst Run:                    Second Run:\n┌──────────────┐              ┌──────────────┐\n│ Install zsh  │ ✓ Changed    │ Install zsh  │ ✓ OK (skipped)\n│ Copy .zshrc  │ ✓ Changed    │ Copy .zshrc  │ ✓ OK (unchanged)\n│ Clone zinit  │ ✓ Changed    │ Clone zinit  │ ✓ OK (exists)\n│ Set shell    │ ✓ Changed    │ Set shell    │ ✓ OK (already set)\n└──────────────┘              └──────────────┘\n4 changes                     0 changes\n\nIdempotency Verification:\n  ansible-playbook site.yml      # First run\n  ansible-playbook site.yml      # Second run\n  # Second run should report: \"changed=0\"\n```\n\n## Extension Points\n\n```\n┌──────────────────────────────────────────────────────────────┐\n│                   CUSTOMIZATION LAYERS                        │\n└──────────────────────────────────────────────────────────────┘\n\nLayer 1: User Variables\n  inventory/group_vars/all.yml\n  └─ Override: git_user_name, git_user_email\n\nLayer 2: Profile Selection\n  bootstrap.sh --profile minimal\n  └─ Choose: minimal, full, custom\n\nLayer 3: Tag Selection\n  ansible-playbook site.yml --tags \"zsh,tmux\"\n  └─ Install: Only specific roles\n\nLayer 4: Custom Roles\n  roles/my-custom-role/\n  └─ Add: New functionality\n\nLayer 5: Local Overrides\n  ~/.zshrc.local (git-ignored)\n  └─ Personal: Machine-specific configs\n```\n\n## Security Model\n\n```\n┌──────────────────────────────────────────────────────────────┐\n│                    SECURITY LAYERS                            │\n└──────────────────────────────────────────────────────────────┘\n\n1. No Root Execution\n   └─ Bootstrap refuses sudo execution\n\n2. Backup Before Changes\n   └─ Automatic timestamped backups\n\n3. Template Variables\n   └─ No hardcoded credentials\n\n4. HTTPS Downloads\n   └─ All sources over secure connections\n\n5. Official Repositories\n   └─ No third-party package sources\n\n6. Rollback Capability\n   └─ scripts/restore.sh from backup\n\n7. Audit Trail\n   └─ ~/.dotfiles_install.log\n```\n\n## Performance Characteristics\n\n```\nInstallation Time (Full Profile):\n┌────────────────────────────────────────┐\n│                                        │\n│  ████████████░░░░░░░░░░ 5-15 min      │\n│                                        │\n│  Breakdown:                            │\n│  • Package downloads: 2-8 min          │\n│  • Config deployment: 1-2 min          │\n│  • Plugin installation: 2-5 min        │\n│                                        │\n└────────────────────────────────────────┘\n\nNetwork Usage:\n  Minimal Profile: ~50-100 MB\n  Full Profile: ~200-500 MB\n  (depends on selected packages)\n\nDisk Space:\n  Installation: ~1-2 GB\n  Backup: ~10-50 MB\n```\n\n## Maintenance Workflow\n\n```\n┌──────────────────────────────────────────────────────────────┐\n│                   MAINTENANCE CYCLE                           │\n└──────────────────────────────────────────────────────────────┘\n\nUpdate Workflow:\n1. Pull latest changes\n   └─ git pull origin main\n\n2. Review changelog\n   └─ Check for breaking changes\n\n3. Test in Vagrant\n   └─ vagrant up && vagrant ssh\n\n4. Update production\n   └─ ./bootstrap.sh (idempotent)\n\n5. Verify changes\n   └─ Test shell, tmux, neovim\n\nContribution Workflow:\n1. Create feature branch\n2. Develop + test locally\n3. Run molecule tests\n4. Update documentation\n5. Submit pull request\n6. CI/CD validation\n7. Merge to main\n```\n\n## Key Metrics\n\n```\n┌──────────────────────────────────────────────────────────────┐\n│                    PROJECT METRICS                            │\n└──────────────────────────────────────────────────────────────┘\n\nRoles: 6\n  ├─ base\n  ├─ git\n  ├─ zsh\n  ├─ tmux\n  ├─ neovim\n  └─ packages\n\nSupported OS: 3\n  ├─ Debian/Ubuntu\n  ├─ macOS\n  └─ Arch Linux\n\nFiles Deployed: ~15-20\n  ├─ Configuration files\n  ├─ Shell scripts\n  └─ Editor configs\n\nPlugins Managed: 20+\n  ├─ Zsh plugins\n  ├─ Tmux plugins\n  └─ Neovim plugins\n\nTests: 18+\n  └─ 6 roles × 3 OS platforms\n```",
      "namespace": "hive",
      "timestamp": 1759281215665
    },
    {
      "key": "hive/reports/architecture-completion",
      "value": "# Architecture Design Completion Report\n## Hive Mind Collective - Analyst Agent\n\n**Task**: Design comprehensive architecture for dotfiles repository\n**Status**: COMPLETE\n**Session**: swarm-1759280876300-8w8vhk75y\n**Date**: 2025-10-01\n\n## Deliverables Completed\n\n### 1. Directory Structure ✓\n- Complete project tree with 6 roles\n- Organized inventory with OS-specific group_vars\n- Dedicated directories for tests, scripts, and docs\n- Clear separation of concerns (roles, playbooks, configs)\n**Storage**: hive/architecture/directory-structure\n\n### 2. Ansible Roles Architecture ✓\n- 6 modular roles: base, zsh, tmux, neovim, git, packages\n- OS-specific handling via task dispatching\n- Template-based configurations with Jinja2\n- Comprehensive idempotency strategies\n- Tag-based selective execution\n**Storage**: hive/architecture/ansible-roles\n\n### 3. Bootstrap Flow Design ✓\n- 7-step installation workflow\n- Minimal dependencies (bash, curl only)\n- Automatic OS detection and package management\n- Backup and rollback capabilities\n- Interactive and non-interactive modes\n- 3 installation profiles (minimal, full, custom)\n**Storage**: hive/architecture/bootstrap-flow\n\n### 4. Architecture Summary ✓\n- Design principles and core components\n- Role dependency graph\n- OS support strategy (Debian, macOS, Arch)\n- Idempotency mechanisms\n- Testing strategy (Molecule + Vagrant)\n- Performance optimizations\n**Storage**: hive/architecture/summary\n\n### 5. Architecture Decision Records ✓\n- 12 documented ADRs covering key technical decisions:\n  - Ansible over shell scripts\n  - Role-based architecture\n  - Zinit over Oh My Zsh\n  - Lazy.nvim over Packer\n  - Template files for OS configs\n  - Molecule and Vagrant for testing\n  - And 6 more architectural choices\n**Storage**: hive/architecture/decisions\n\n### 6. Visual Architecture Summary ✓\n- System overview diagrams\n- Role architecture visualization\n- Data flow and variable hierarchy\n- File deployment strategy\n- Testing pyramid\n- OS-specific package mappings\n- Security model\n- Performance characteristics\n**Storage**: hive/architecture/visual-summary\n\n## Key Architecture Decisions\n\n### Platform Support\n- **Operating Systems**: Debian/Ubuntu, macOS, Arch Linux\n- **Package Managers**: apt-get, Homebrew, pacman\n- **Python**: 3.6+ (auto-installed)\n- **Ansible**: 2.9+ (auto-installed)\n\n### Core Technologies\n- **Shell**: Zsh with zinit plugin manager\n- **Multiplexer**: Tmux with TPM\n- **Editor**: Neovim with lazy.nvim\n- **VCS**: Git with templated configuration\n\n### Role Organization\n```\nbase (foundation) → packages, git (parallel)\n                 → zsh → tmux → neovim (sequential)\n```\n\n### Installation Profiles\n1. **Minimal**: base + zsh + git + essentials (2-5 min)\n2. **Full**: All roles + plugins + optional tools (5-15 min)\n3. **Custom**: User-selected via tags\n\n### Testing Strategy\n- **Molecule**: Docker-based per-role testing (18+ tests)\n- **Vagrant**: VM-based integration testing\n- **Manual**: macOS and hardware validation\n- **Idempotency**: Second run = 0 changes\n\n### Security Features\n- No root execution requirement\n- Automatic backup before changes\n- Template variables (no hardcoded secrets)\n- HTTPS-only downloads\n- Official package repositories only\n- Complete rollback capability\n\n## Implementation Readiness\n\nThe architecture is complete and ready for implementation with:\n\n✓ Complete directory structure specification\n✓ Detailed role organization and dependencies\n✓ OS-specific handling strategies\n✓ Comprehensive testing approach\n✓ Bootstrap workflow with error handling\n✓ Idempotency guarantees\n✓ Security model\n✓ Extension points for customization\n\n## Next Steps for Hive Collective\n\nThe architecture is now available in collective memory for the implementation team:\n\n**For Bootstrap Developer**:\n- Reference: hive/architecture/bootstrap-flow\n- Implement: bootstrap.sh, install scripts, backup/restore\n\n**For Role Developers**:\n- Reference: hive/architecture/ansible-roles\n- Implement: 6 Ansible roles with OS-specific tasks\n\n**For Configuration Developers**:\n- Reference: hive/architecture/directory-structure\n- Create: Configuration files and templates\n\n**For Test Engineers**:\n- Reference: hive/architecture/ansible-roles (Testing Strategy)\n- Implement: Molecule and Vagrant tests\n\n**For Documentation Writers**:\n- Reference: All architecture documents\n- Create: README, CUSTOMIZATION, TROUBLESHOOTING guides\n\n## Memory Keys for Collective Access\n\nAll architecture specifications stored under namespace \"hive\":\n\n1. `hive/architecture/directory-structure` - Complete project tree\n2. `hive/architecture/ansible-roles` - Role organization and strategies\n3. `hive/architecture/bootstrap-flow` - Installation workflow\n4. `hive/architecture/summary` - Architecture overview\n5. `hive/architecture/decisions` - 12 ADRs\n6. `hive/architecture/visual-summary` - Diagrams and visualizations\n\n## Success Metrics\n\n✓ Supports 3 operating systems\n✓ 6 modular, testable roles\n✓ Idempotent (safe to re-run)\n✓ Minimal bootstrap dependencies\n✓ Comprehensive testing (18+ tests)\n✓ Complete documentation\n✓ Extensible architecture\n✓ Security-conscious design\n\n---\n\n**Architecture Design: COMPLETE**\n**Ready for Implementation: YES**\n**Collective Memory: SYNCHRONIZED**",
      "namespace": "hive",
      "timestamp": 1759281262877
    },
    {
      "key": "hive/testing/test-coverage",
      "value": "{\n  \"test_framework_version\": \"1.0.0\",\n  \"created\": \"2025-10-01T01:14:25Z\",\n  \"test_categories\": {\n    \"syntax\": {\n      \"script\": \"tests/syntax/validate_ansible.sh\",\n      \"purpose\": \"Validate Ansible YAML syntax and lint playbooks\",\n      \"tools\": [\"ansible-playbook --syntax-check\", \"ansible-lint\"]\n    },\n    \"idempotency\": {\n      \"script\": \"tests/idempotency/test_idempotency.sh\",\n      \"purpose\": \"Ensure playbooks run without changes on second execution\",\n      \"modes\": [\"check-mode\", \"actual-execution\"]\n    },\n    \"functional\": {\n      \"script\": \"tests/functional/test_installations.sh\",\n      \"purpose\": \"Test installed software and configurations\",\n      \"validates\": [\"zsh\", \"tmux\", \"neovim\", \"git\", \"configs\", \"permissions\"]\n    },\n    \"os_specific\": {\n      \"debian\": \"tests/os-specific/test_debian.sh\",\n      \"macos\": \"tests/os-specific/test_macos.sh\",\n      \"arch\": \"tests/os-specific/test_arch.sh\",\n      \"purpose\": \"Platform-specific package manager and system validation\"\n    },\n    \"integration\": {\n      \"script\": \"tests/integration/test_full_setup.sh\",\n      \"purpose\": \"End-to-end testing of complete dotfiles setup\",\n      \"phases\": 7\n    }\n  },\n  \"ci_cd\": {\n    \"platform\": \"GitHub Actions\",\n    \"workflow\": \".github/workflows/ci.yml\",\n    \"triggers\": [\"push\", \"pull_request\", \"schedule\", \"workflow_dispatch\"],\n    \"test_matrix\": {\n      \"ubuntu\": [\"20.04\", \"22.04\", \"24.04\"],\n      \"debian\": [\"11\", \"12\"],\n      \"macos\": [\"latest\"]\n    }\n  },\n  \"total_test_scripts\": 8,\n  \"documentation\": [\"docs/testing.md\", \"tests/README.md\"],\n  \"results_template\": \"tests/test-results-template.json\"\n}",
      "namespace": "hive",
      "timestamp": 1759281266379
    },
    {
      "key": "hive/testing/validation-checklist",
      "value": "{\n  \"manual_testing_checklist\": {\n    \"pre_installation\": [\n      \"System meets minimum requirements\",\n      \"User has sudo/admin access\",\n      \"Internet connection available\",\n      \"Git is installed\"\n    ],\n    \"post_installation\": {\n      \"zsh\": [\n        \"zsh --version shows installed\",\n        \"$SHELL points to zsh\",\n        \".zshrc exists and is sourced\",\n        \"Custom prompt appears\",\n        \"Aliases work correctly\",\n        \"Oh My Zsh installed (if applicable)\"\n      ],\n      \"tmux\": [\n        \"tmux -V shows version\",\n        \".tmux.conf exists\",\n        \"Can start tmux session\",\n        \"Custom keybindings work\",\n        \"Status bar configured\",\n        \"TPM installed (if applicable)\"\n      ],\n      \"neovim\": [\n        \"nvim --version works\",\n        \"Config directory exists at ~/.config/nvim/\",\n        \"Can start nvim\",\n        \"Plugins are loaded\",\n        \"LSP works (if configured)\",\n        \"Color scheme applied\"\n      ],\n      \"git\": [\n        \"git --version works\",\n        \".gitconfig exists\",\n        \"user.name configured\",\n        \"user.email configured\",\n        \"Git aliases work\"\n      ],\n      \"general\": [\n        \"All dotfiles symlinked/copied correctly\",\n        \"File permissions are correct\",\n        \"No broken symlinks\",\n        \"Backup of old configs created\"\n      ]\n    },\n    \"functional_testing\": {\n      \"zsh\": [\"echo test\", \"alias\", \"custom functions\"],\n      \"tmux\": [\"tmux new -s test\", \"prefix key works\", \"pane splitting\"],\n      \"neovim\": [\"nvim test.txt\", \":checkhealth\", \":LspInfo\"]\n    }\n  },\n  \"automated_test_commands\": {\n    \"syntax\": \"./tests/syntax/validate_ansible.sh\",\n    \"idempotency_safe\": \"./tests/idempotency/test_idempotency.sh\",\n    \"idempotency_actual\": \"ANSIBLE_TEST_ACTUAL=true ./tests/idempotency/test_idempotency.sh\",\n    \"functional\": \"./tests/functional/test_installations.sh\",\n    \"os_specific_auto\": \"./tests/os-specific/test_*.sh (auto-detects)\",\n    \"integration\": \"./tests/integration/test_full_setup.sh\"\n  },\n  \"troubleshooting\": {\n    \"syntax_errors\": \"Run: yamllint playbook.yml && ansible-playbook --syntax-check playbook.yml\",\n    \"idempotency_fails\": \"Check for shell/command without changed_when, verify file modes\",\n    \"software_not_found\": \"Verify package installation, check $PATH, reload shell\",\n    \"permission_errors\": \"chmod +x tests/**/*.sh, check ownership with ls -la\"\n  }\n}",
      "namespace": "hive",
      "timestamp": 1759281269042
    }
  ]
}